<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/06/12/%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86/"/>
    <url>/2022/06/12/%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%87%E5%87%86/</url>
    
    <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h3 id="功能选项模式"><a href="#功能选项模式" class="headerlink" title="功能选项模式"></a>功能选项模式</h3><p>通过opt自定义参数，进行生成模板的修改，从而实现部件自定义。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Client rpc client based on net/rpc implementation</span><br><span class="hljs-keyword">type</span> Client <span class="hljs-keyword">struct</span> &#123;<br>*rpc.Client<br>&#125;<br><br><span class="hljs-comment">//Option provides options for rpc</span><br><span class="hljs-keyword">type</span> Option <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(o *options)</span></span><br><br><span class="hljs-keyword">type</span> options <span class="hljs-keyword">struct</span> &#123;<br>compressType compressor.CompressType<br>serializer   serializer.Serializer<br>&#125;<br><br><span class="hljs-comment">// WithCompress set client compression format</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WithCompress</span><span class="hljs-params">(c compressor.CompressType)</span></span> Option &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(o *options)</span></span> &#123;<br>o.compressType = c<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// WithSerializer set client serializer</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WithSerializer</span><span class="hljs-params">(serializer serializer.Serializer)</span></span> Option &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(o *options)</span></span> &#123;<br>o.serializer = serializer<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// NewClient Create a new rpc client</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewClient</span><span class="hljs-params">(conn io.ReadWriteCloser, opts ...Option)</span></span> *Client &#123;<br>options := options&#123;<br>compressType: compressor.Raw,<br>serializer:   serializer.Proto,<br>&#125;<br><span class="hljs-keyword">for</span> _, option := <span class="hljs-keyword">range</span> opts &#123;<br>option(&amp;options)<br>&#125;<br><span class="hljs-keyword">return</span> &amp;Client&#123;rpc.NewClientWithCodec(<br>codec.NewClientCodec(conn, options.compressType, options.serializer))&#125;<br>&#125;<br><br><span class="hljs-comment">// Call synchronously calls the rpc function</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Client)</span></span> Call(serviceMethod <span class="hljs-type">string</span>, args <span class="hljs-keyword">interface</span>&#123;&#125;, reply <span class="hljs-keyword">interface</span>&#123;&#125;) <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">return</span> c.Client.Call(serviceMethod, args, reply)<br>&#125;<br><br><span class="hljs-comment">// AsyncCall asynchronously calls the rpc function and returns a channel of *rpc.Call</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Client)</span></span> AsyncCall(serviceMethod <span class="hljs-type">string</span>, args <span class="hljs-keyword">interface</span>&#123;&#125;, reply <span class="hljs-keyword">interface</span>&#123;&#125;) <span class="hljs-keyword">chan</span> *rpc.Call &#123;<br><span class="hljs-keyword">return</span> c.Go(serviceMethod, args, reply, <span class="hljs-literal">nil</span>).Done<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Restful"><a href="#Restful" class="headerlink" title="Restful"></a>Restful</h1><p>REST(Representational State Transfer :表述性状态转化)指满足一组架构约束条件和原则一个架构样式的网络系统 ,比如 web 应用程序。而这样的设计称为Restful。</p><p>主要概念：</p><ol><li>资源(Resources)</li><li>表现层（Representation）</li><li>状态转化（State Transfer）</li></ol><p>通俗讲，Restful是以资源标识、层级划分、状态定义进行接口的设计方法，如GET、POST等动词不应出现在URL中，示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs api">/bank/account?id=1   GET <br></code></pre></td></tr></table></figure><h1 id="优化设计"><a href="#优化设计" class="headerlink" title="优化设计"></a>优化设计</h1><h3 id="依赖倒置"><a href="#依赖倒置" class="headerlink" title="依赖倒置"></a>依赖倒置</h3><p><strong>实现要求：</strong>不同层之间对外的接口一律以interface的方式提供，并且单一职责的设计，接口尽可能简单清晰，接口文件单独存放，不放在具体实现的文件中，依赖参数定义和接口声明放在一起。</p><p>示例：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><p>BAD：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Server <span class="hljs-keyword">struct</span> &#123;<br>  Conf *Config <span class="hljs-comment">// 依赖 Config</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewServer</span><span class="hljs-params">()</span></span> *Server &#123;<br>  <span class="hljs-keyword">return</span> &amp;&#123;<br>    Conf: config.New()<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>GOOD：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Server <span class="hljs-keyword">struct</span> &#123;<br>  Conf *Config <span class="hljs-comment">// 依赖 Config</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewServer</span><span class="hljs-params">(c *Config)</span></span> *Server &#123;<span class="hljs-comment">//依赖以参数的方式进行注入模块中</span><br>  <span class="hljs-keyword">return</span> &amp;&#123;<br>    Conf: c<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h1><p>推荐阅读：<a href="https://github.com/xxjwxc/uber_go_guide_cn">Uber Go 语言编码规范中文版. The Uber Go Style Guide .</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/06/12/hello-world/"/>
    <url>/2022/06/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
